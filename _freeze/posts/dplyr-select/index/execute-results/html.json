{
  "hash": "f2d2b91e42fda602baf6e1d30adcc34e",
  "result": {
    "markdown": "---\ntitle: \"Selecting columns in dplyr\"\ndate: \"2020-09-24\"\ncategories: [\"R\", \"dplyr\", \"tidyselect\"]\n---\n\n\n\nOne feature of report building that has always bothered me was adjusting column names in final so I could have something prettier than a series of columns_with_underscores that people who use too much Excel find repulsive.\nThe same is true of anyType of CamelCase.\nThere is a functionality with `dplyr` that let's me manage updating these names through a clean, reversible, and friendly manner.\nI discovered this like a toddler just seeing what could happen if I passed a named vector into a `select()` function and delighted with the result.\nWeird though because I didn't remember seeing this in any of the documentation, and when I searched harder through `dplyr` and `tidyselect` I found nothing except for a sort of close but not really close enough reference  in an [faq in from `tidyselect`](https://github.com/r-lib/tidyselect/blob/master/man/faq/external-vector.Rmd) which warns against the use of external vectors.\nHowever, we should be safeguarded against accidents (and warnings) if we employ `all_of()` (and `any_of()`).\n\nLet's walk through an example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr, warn.conflicts = FALSE)\n```\n:::\n\n\nWe'll use a data set from the `psych` package that has relatively, very short column names.\nWe'll want to take these and make them a bit more specific without incurring much penalty with ourselves.\nTrying to manage column names with spaces and other special characters can be a real thorn in the index finger.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"bfi\", package = \"psych\")\nsapa <- tibble::as_tibble(bfi)[1:100, c(1:2, 6:7, 11:12, 16:17, 26:28)] # shorter\nsapa\n#> # A tibble: 100 × 11\n#>       A1    A2    C1    C2    E1    E2    N1    N2 gender education   age\n#>    <int> <int> <int> <int> <int> <int> <int> <int>  <int>     <int> <int>\n#>  1     2     4     2     3     3     3     3     4      1        NA    16\n#>  2     2     4     5     4     1     1     3     3      2        NA    18\n#>  3     5     4     4     5     2     4     4     5      2        NA    17\n#>  4     4     4     4     4     5     3     2     5      2        NA    17\n#>  5     2     3     4     4     2     2     2     3      1        NA    17\n#>  6     6     6     6     6     2     1     3     5      2         3    21\n#>  7     2     5     5     4     4     3     1     2      1        NA    18\n#>  8     4     3     3     2     3     6     6     3      1         2    19\n#>  9     4     3     6     6     5     3     5     5      1         1    19\n#> 10     2     5     6     5     2     2     5     5      2        NA    17\n#> # … with 90 more rows\n```\n:::\n\n\nWe can create a named vector to help keep track of the longer, more specific names of our output data.\nThe first 8 columns will be renamed and the demographic information will be moved to the start.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_names <- c(\n  \"gender\",\n  \"education\",\n  \"age\",\n  \"Indifferent to feelings\"      = \"A1\",\n  \"Inquire about well-being\"     = \"A2\",\n  \"Exacting about work\"          = \"C1\",\n  \"Continue until perfection\"    = \"C2\",\n  \"Don't talk a lot\"             = \"E1\",\n  \"Difficult to approach others\" = \"E2\",\n  \"Get angry easily\"             = \"N1\",\n  \"Get irritated easily\"         = \"N2\"\n)\n```\n:::\n\n\nHere's the typical solution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapa %>% \n  select(\n    gender,\n    education,\n    age,\n    `Indifferent to feelings`      = A1,\n    `Inquire about well-being`     = A2,\n    `Exacting about work`          = C1,\n    `Continue until perfection`    = C2,\n    `Don't talk a lot`             = E1,\n    `Difficult to approach others` = E2,\n    `Get angry easily`             = N1,\n    `Get irritated easily`         = N2\n  )\n#> # A tibble: 100 × 11\n#>    gender education   age `Indifferent to fe…` `Inquire about…` `Exacting abou…`\n#>     <int>     <int> <int>                <int>            <int>            <int>\n#>  1      1        NA    16                    2                4                2\n#>  2      2        NA    18                    2                4                5\n#>  3      2        NA    17                    5                4                4\n#>  4      2        NA    17                    4                4                4\n#>  5      1        NA    17                    2                3                4\n#>  6      2         3    21                    6                6                6\n#>  7      1        NA    18                    2                5                5\n#>  8      1         2    19                    4                3                3\n#>  9      1         1    19                    4                3                6\n#> 10      2        NA    17                    2                5                6\n#> # … with 90 more rows, and 5 more variables: `Continue until perfection` <int>,\n#> #   `Don't talk a lot` <int>, `Difficult to approach others` <int>,\n#> #   `Get angry easily` <int>, `Get irritated easily` <int>\n```\n:::\n\n\nWe can use the `tidyselect::all_of()` function without as it is reexported with `dplyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapa %>% \n  select(all_of(long_names))\n#> # A tibble: 100 × 11\n#>    gender education   age `Indifferent to fe…` `Inquire about…` `Exacting abou…`\n#>     <int>     <int> <int>                <int>            <int>            <int>\n#>  1      1        NA    16                    2                4                2\n#>  2      2        NA    18                    2                4                5\n#>  3      2        NA    17                    5                4                4\n#>  4      2        NA    17                    4                4                4\n#>  5      1        NA    17                    2                3                4\n#>  6      2         3    21                    6                6                6\n#>  7      1        NA    18                    2                5                5\n#>  8      1         2    19                    4                3                3\n#>  9      1         1    19                    4                3                6\n#> 10      2        NA    17                    2                5                6\n#> # … with 90 more rows, and 5 more variables: `Continue until perfection` <int>,\n#> #   `Don't talk a lot` <int>, `Difficult to approach others` <int>,\n#> #   `Get angry easily` <int>, `Get irritated easily` <int>\n```\n:::\n\n\n<details>\n  <summary>But is it faster?</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfoo_select_all_of <- function() {\n  long_names <- c(\n    \"gender\",\n    \"education\",\n    \"age\",\n    \"Indifferent to feelings\"      = \"A1\",\n    \"Inquire about well-being\"     = \"A2\",\n    \"Exacting about work\"          = \"C1\",\n    \"Continue until perfection\"    = \"C2\",\n    \"Don't talk a lot\"             = \"E1\",\n    \"Difficult to approach others\" = \"E2\",\n    \"Get angry easily\"             = \"N1\",\n    \"Get irritated easily\"         = \"N2\"\n  )\n  \n  sapa %>% \n  select(all_of(long_names))\n}\n\nfoo_select <- function() {\n  sapa %>% \n  select(\n    gender,\n    education,\n    age,\n    `Indifferent to feelings`      = A1,\n    `Inquire about well-being`     = A2,\n    `Exacting about work`          = C1,\n    `Continue until perfection`    = C2,\n    `Don't talk a lot`             = E1,\n    `Difficult to approach others` = E2,\n    `Get angry easily`             = N1,\n    `Get irritated easily`         = N2\n  )\n}\n\nbench::mark(\n  foo_select_all_of(),\n  foo_select()\n)\n#> # A tibble: 2 × 6\n#>   expression               min   median `itr/sec` mem_alloc `gc/sec`\n#>   <bch:expr>          <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 foo_select_all_of()   1.51ms   1.78ms      502.    8.67KB     21.2\n#> 2 foo_select()          5.82ms   6.91ms      119.   41.45KB     22.8\n```\n:::\n\n\nYes.\n\n</details>\n\nWe get the same result and don't need to clog up the piped if we need to do some mutation, grouping, summarising, etc.\nThis also lets us separate out definitions of the data in case we need to change things:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_names_less <- long_names[c(1, 3, grep(\"about\", names(long_names)))]\n\nsapa %>% \n  select(all_of(long_names_less))\n#> # A tibble: 100 × 4\n#>    gender   age `Inquire about well-being` `Exacting about work`\n#>     <int> <int>                      <int>                 <int>\n#>  1      1    16                          4                     2\n#>  2      2    18                          4                     5\n#>  3      2    17                          4                     4\n#>  4      2    17                          4                     4\n#>  5      1    17                          3                     4\n#>  6      2    21                          6                     6\n#>  7      1    18                          5                     5\n#>  8      1    19                          3                     3\n#>  9      1    19                          3                     6\n#> 10      2    17                          5                     6\n#> # … with 90 more rows\n```\n:::\n\n\n> Using `any_of()` instead we could essentially pre-define more \"programming\" and \"output\" names and pass it to whatever you are working with.\nThis has been useful by establishing a saved vector of names and using it across multiple reports to keep our naming convention consistent.\n\nWe can even write some short functions in case we need to use an output we've created before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames_fill <- function(x) {\n  nm <- names(x)\n  blanks <- nm == \"\"\n  names(x)[blanks] <- x[blanks]\n  x\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsapa2 <- sapa %>% select(all_of(long_names))\nlong_names_switched <- mark::names_switch(names_fill(long_names))\nlong_names\n#>                                                           \n#>                     \"gender\"                  \"education\" \n#>                                   Indifferent to feelings \n#>                        \"age\"                         \"A1\" \n#>     Inquire about well-being          Exacting about work \n#>                         \"A2\"                         \"C1\" \n#>    Continue until perfection             Don't talk a lot \n#>                         \"C2\"                         \"E1\" \n#> Difficult to approach others             Get angry easily \n#>                         \"E2\"                         \"N1\" \n#>         Get irritated easily \n#>                         \"N2\"\nlong_names_switched\n#>                         gender                      education \n#>                       \"gender\"                    \"education\" \n#>                            age                             A1 \n#>                          \"age\"      \"Indifferent to feelings\" \n#>                             A2                             C1 \n#>     \"Inquire about well-being\"          \"Exacting about work\" \n#>                             C2                             E1 \n#>    \"Continue until perfection\"             \"Don't talk a lot\" \n#>                             E2                             N1 \n#> \"Difficult to approach others\"             \"Get angry easily\" \n#>                             N2 \n#>         \"Get irritated easily\"\n\nsapa2 %>% \n  select(all_of(long_names_switched))\n#> # A tibble: 100 × 11\n#>    gender education   age    A1    A2    C1    C2    E1    E2    N1    N2\n#>     <int>     <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>\n#>  1      1        NA    16     2     4     2     3     3     3     3     4\n#>  2      2        NA    18     2     4     5     4     1     1     3     3\n#>  3      2        NA    17     5     4     4     5     2     4     4     5\n#>  4      2        NA    17     4     4     4     4     5     3     2     5\n#>  5      1        NA    17     2     3     4     4     2     2     2     3\n#>  6      2         3    21     6     6     6     6     2     1     3     5\n#>  7      1        NA    18     2     5     5     4     4     3     1     2\n#>  8      1         2    19     4     3     3     2     3     6     6     3\n#>  9      1         1    19     4     3     6     6     5     3     5     5\n#> 10      2        NA    17     2     5     6     5     2     2     5     5\n#> # … with 90 more rows\n```\n:::\n\n\nAnd now our names are back to normal.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}