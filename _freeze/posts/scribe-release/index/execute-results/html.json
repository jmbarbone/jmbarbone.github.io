{
  "hash": "740025c7d1153594245350fd924d47e5",
  "result": {
    "markdown": "---\ntitle: \"`{scribe}` release\"\nsubtitle: \"A package to support `Rscript` files\"\ndate: \"2023-03-06\"\ncategories: [\"R\", \"{scribe}\"]\ndraft: true\n---\n\n\nI'm excited to be finalizing release preparations of [`{scribe}`](https://jmbarbone.github.io/scribe/).\nThis package supports writing your own **Rscript** files and executing them through a terminal.\n\nWe'll start with a simple example.\nFor most of these, I'll be using the direct **R** interface.\nHowever, this package is best used with a [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)) script ^[I'm pretty sure this is pronounced like _sha-bang_ because it's a hash (`#`) and bang (`!`).  But I used to think _she-bang_, which conjures [The Stone Roses' _She Bangs the Drums_](https://www.youtube.com/watch?v=wD6Pq0bSMPo), a pleasant ear-worm.  I think it also works to just shout [_octothorpe_](https://en.wikipedia.org/wiki/Number_sign#Octothorp)!].\n\nKeep in mind that `command_args()` doesn't need an explicit input, and when used with **Rscript** will automatically capture command line arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scribe)\nca <- command_args(string = \"-a 1 -b 0\")\nca$add_argument(\"-a\", default = 0L)\nca$add_argument(\"-b\", default = 0L)\nargs <- ca$parse()\nargs$a + args$b\n#> [1] 1\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nca$set_input(c(\"-a 10 -b 10\"))\nargs <- ca$parse()\n#> Warning: Not all values parsed:\n#> -a 10 -b 10\nargs$a + args$b\n#> [1] 0\n```\n:::\n\n\nThat's a little easy, so maybe we can make something a bit more interesting.\n\nFirst we'll make ourselves a little modeling function.\nThis is not meant for completeness, but simply provides a few examples for creativity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_model <- function(\n    data = c(\"penguins\", \"mtcars\", \"sat.act\"), \n    y, \n    x = NA, \n    family = \"gaussian\", \n    correlation = FALSE\n  ) {\n  data <- match.arg(data)\n  \n  data <- switch(\n    data,\n    penguins = palmerpenguins::penguins,\n    mtcars = datasets::mtcars,\n    sat.act = transform(\n      psych::sat.act, \n      gender = as.integer(gender == 1)\n    )\n  )\n  \n  if (isTRUE(is.na(x))) {\n    x <- setdiff(colnames(data), y)\n  }\n  \n  data <- data[, c(y, x)]\n  form <- stats::DF2formula(data)\n  mod <- stats::glm(form, data = data, family = family)\n  summary(mod, correlation = correlation)\n}\n```\n:::\n\n\nNow that we have that, we can set up the command args to parse what our string inputs are.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we'll pass arguments after\nca <- command_args()\nca$add_description(\"run a quick model\")\nca$add_argument(\n  \"data\",\n  default = \"penguins\",\n  info = \"a dataset to view\"\n)\nca$add_argument(\"y\", info = \"value to predict\")\nca$add_argument(\"x\", default = NA, info = \"variables\")\nca$add_argument(\n  \"--family\",\n  default = \"gaussian\",\n  info = \"error distribution, link function\"\n)\nca$add_argument(\n  \"--correlation\",\n  action = \"flag\",\n  info = \"when set, returns the correlation matrix\"\n)\nca$add_example(\"my-model.R penguins body_mass_g\")\nca$add_example(\"my-model.R mtcars mpg --correlation\")\n```\n:::\n\n\nThere's a default _help_ arg added to the `scribeCommandArg` object.\nWhen `--help` is found in the command line arguments, the script will try to exit, returning only the help information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scribe.interactive = TRUE)\nca$set_input(\"--help\")\nca$parse()\n#> {scribe} command_args\n#> \n#> file : /home/jordan/github/quarto-cli/src/resources/rmd/rmd.R\n#> \n#> DESCRIPTION\n#>   run a quick model\n#> \n#> USAGE\n#>   rmd.R [--help | --version]\n#>   rmd.R [data [ARG]] [y [ARG]] [x [ARG]] [--family [ARG]] [--correlation, --no-correlation] \n#> \n#> ARGUMENTS\n#>   --help                          : prints this and quietly exits                   \n#>   --version                       : prints the version of {scribe} and quietly exits\n#>   data [ARG]                      : a dataset to view                               \n#>   y [ARG]                         : value to predict                                \n#>   x [ARG]                         : variables                                       \n#>   --family [ARG]                  : error distribution, link function               \n#>   --correlation, --no-correlation : when set, returns the correlation matrix        \n#> \n#> EXAMPLES\n#>   $ my-model.R penguins body_mass_g    \n#>   $ my-model.R mtcars mpg --correlation\n```\n:::\n\n\nLet's simulate a few examples:\n\n```bash\nmy-model.R penguins body_mass_g\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca$set_input(c(\"penguins\", \"body_mass_g\"))\ndo.call(my_model, ca$parse())\n#> \n#> Call:\n#> stats::glm(formula = form, family = family, data = data)\n#> \n#> Deviance Residuals: \n#>     Min       1Q   Median       3Q      Max  \n#> -809.70  -180.87    -6.25   176.76   864.22  \n#> \n#> Coefficients:\n#>                    Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)       84087.945  41912.019   2.006  0.04566 *  \n#> speciesChinstrap   -282.539     88.790  -3.182  0.00160 ** \n#> speciesGentoo       890.958    144.563   6.163 2.12e-09 ***\n#> islandDream         -21.180     58.390  -0.363  0.71704    \n#> islandTorgersen     -58.777     60.852  -0.966  0.33482    \n#> bill_length_mm       18.964      7.112   2.667  0.00805 ** \n#> bill_depth_mm        60.798     20.002   3.040  0.00256 ** \n#> flipper_length_mm    18.504      3.128   5.915 8.46e-09 ***\n#> sexmale             378.977     48.074   7.883 4.95e-14 ***\n#> year                -42.785     20.949  -2.042  0.04194 *  \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for gaussian family taken to be 82096.03)\n#> \n#>     Null deviance: 215259666  on 332  degrees of freedom\n#> Residual deviance:  26517018  on 323  degrees of freedom\n#>   (11 observations deleted due to missingness)\n#> AIC: 4725\n#> \n#> Number of Fisher Scoring iterations: 2\n```\n:::\n\n\n```bash\nmy-mode.R mtcars mpg --correlation\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca$set_input(c(\"mtcars\", \"mpg\", \"--correlation\"))\ndo.call(my_model, ca$parse())\n#> \n#> Call:\n#> stats::glm(formula = form, family = family, data = data)\n#> \n#> Deviance Residuals: \n#>     Min       1Q   Median       3Q      Max  \n#> -3.4506  -1.6044  -0.1196   1.2193   4.6271  \n#> \n#> Coefficients:\n#>             Estimate Std. Error t value Pr(>|t|)  \n#> (Intercept) 12.30337   18.71788   0.657   0.5181  \n#> cyl         -0.11144    1.04502  -0.107   0.9161  \n#> disp         0.01334    0.01786   0.747   0.4635  \n#> hp          -0.02148    0.02177  -0.987   0.3350  \n#> drat         0.78711    1.63537   0.481   0.6353  \n#> wt          -3.71530    1.89441  -1.961   0.0633 .\n#> qsec         0.82104    0.73084   1.123   0.2739  \n#> vs           0.31776    2.10451   0.151   0.8814  \n#> am           2.52023    2.05665   1.225   0.2340  \n#> gear         0.65541    1.49326   0.439   0.6652  \n#> carb        -0.19942    0.82875  -0.241   0.8122  \n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for gaussian family taken to be 7.023544)\n#> \n#>     Null deviance: 1126.05  on 31  degrees of freedom\n#> Residual deviance:  147.49  on 21  degrees of freedom\n#> AIC: 163.71\n#> \n#> Number of Fisher Scoring iterations: 2\n#> \n#> Correlation of Coefficients:\n#>      (Intercept) cyl   disp  hp    drat  wt    qsec  vs    am    gear \n#> cyl  -0.67                                                            \n#> disp -0.02       -0.27                                                \n#> hp   -0.07       -0.18 -0.52                                          \n#> drat -0.42        0.28 -0.12  0.09                                    \n#> wt    0.09        0.11 -0.77  0.24  0.17                              \n#> qsec -0.77        0.27  0.29  0.11  0.04 -0.51                        \n#> vs    0.09        0.32  0.10 -0.27 -0.03  0.08 -0.37                  \n#> am   -0.23        0.26  0.03 -0.05 -0.16  0.09  0.27  0.21            \n#> gear -0.41        0.35 -0.08 -0.09 -0.07  0.18  0.08 -0.04 -0.31      \n#> carb  0.12       -0.23  0.67 -0.53 -0.21 -0.70  0.27  0.09  0.06 -0.42\n```\n:::\n\n\n```bash\nmy-model.R sat.act gender --family binomial --correlation\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nca$set_input(c(\"sat.act\", \"gender\", \"--family\", \"binomial\", \"--correlation\"))\ndo.call(my_model, ca$parse())\n#> \n#> Call:\n#> stats::glm(formula = form, family = family, data = data)\n#> \n#> Deviance Residuals: \n#>     Min       1Q   Median       3Q      Max  \n#> -1.6500  -0.9385  -0.7658   1.2356   2.0129  \n#> \n#> Coefficients:\n#>              Estimate Std. Error z value Pr(>|z|)    \n#> (Intercept) -1.804944   0.587445  -3.073  0.00212 ** \n#> education   -0.220411   0.069023  -3.193  0.00141 ** \n#> age          0.024923   0.010339   2.411  0.01593 *  \n#> ACT         -0.019895   0.022941  -0.867  0.38582    \n#> SATV        -0.002496   0.001026  -2.434  0.01493 *  \n#> SATQ         0.005462   0.001069   5.110 3.22e-07 ***\n#> ---\n#> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> (Dispersion parameter for binomial family taken to be 1)\n#> \n#>     Null deviance: 895.09  on 686  degrees of freedom\n#> Residual deviance: 854.46  on 681  degrees of freedom\n#>   (13 observations deleted due to missingness)\n#> AIC: 866.46\n#> \n#> Number of Fisher Scoring iterations: 4\n#> \n#> Correlation of Coefficients:\n#>           (Intercept) education age   ACT   SATV \n#> education -0.01                                  \n#> age       -0.28       -0.55                      \n#> ACT       -0.28       -0.09     -0.11            \n#> SATV      -0.25        0.01      0.07 -0.30      \n#> SATQ      -0.24       -0.01      0.06 -0.38 -0.46\n```\n:::\n\n\nIf I needed this, maybe it would make sense to be able to read the data from a file path, then execute something like:\n\n```sh\nmy-model.R data/example.csv response\n```\n\nFor a more real example, I'll use a trimmed down version of a [`{pak}`](https://pak.r-lib.org/) [cli utiliy](https://github.com/jmbarbone/jmb/blob/main/bin/pak) I've been using a lot.\nI really like using python's [`pip`](https://pypi.org/project/pip/) and wanted to have something similar to **R**.\n[`{pak}`](https://pak.r-lib.org/) is fantastic and highly recommended.\n\nSo, to make our own little command line utility, we just need to include small things and get going:\n\n```Rscript\n#!/usr/bin/env -S Rscript --vanilla\n\nlibrary(scribe)\nca <- command_args()\nca$add_argument(\"pkg\", action = \"dots\", default = \"local::.\")\nca$add_argument(\"-d\", \"--dependencies, action = \"list\", default = TRUE)\nargs <- ca$parse()\ndo.call(pak::pak, args)\n```\n\nNow, I can install packages nicely in a terminal:\n\n```bash\npak github::jmbarbone/mark -d\npak dplyr dbplyr dtplyr\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}