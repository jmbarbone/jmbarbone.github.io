{
  "hash": "a1137fb2645b0b3bec8a16c6c79eb677",
  "result": {
    "markdown": "---\ntitle: Confidence intervals\nsubtitle: Mean estimate\ndate: \"2022-07-17\"\ncategories: [\"R\", \"statistics\"]\ndraft: true\n---\n\n\nConfidence intervals (CIs) provide an estimation of a true value within a population, and some type of certainty around that value.\nThe certainty that is constructed can be a little confusion, and perhaps misleading.\nIt is often communicated with less-than-desirable terminology and phrasing.\n\n## Objectives\n\n1. Provide basic formula for computing a CI for a sample\n2. Provide an accurate definition of the CI\n3. Demonstrate the concept of the CI with visual aids\n\n## Parameters\n\n\n$$\n\\begin{array}{l,l,c,r}\n  \\text{sample n} & n &=& 100 \\\\\n  \\text{population mean} & \\mu &=& 5 \\\\\n  \\text{population standard deviation} & \\sigma &=& 2 \\\\\n  \\text{alpha level} & \\alpha &=& 0.95\n\\end{array}\n$$\n\n\n```{.r .cell-code}\nset.seed(20220804)\nn <- 100\nmu <- 5\nsigma <- 2\nalpha <- 0.95\n\ndo_sample <- function() {\n  # n, mu, sigma defined outside\n  rnorm(n, mu, sigma) \n}\n\nx <- do_sample()\ns <- sd(x)\nxbar <- mean(x)\nz <- qnorm((1 - alpha) / 2, lower.tail = FALSE)\n```\n\n\n| Name                    | Value    |\n|-------------------------|----------|\n| Mean $\\bar{x}$          | 5.4082339 |\n| Standard deviation $s$ | 1.9219276    |\n| Z-score ($z$)           | 1.959964    |\n\n## Confidence interval (objective 1, objective 2)\n\n\n$$\n\\text{CI}_\\mathit{mean}\\ =\\ \\bar{x}\\ \\pm\\ Z_{\\alpha/2}\\ \\times \\mathit{se} \\\\\n$$\n\n\nWhen we construct a confidence interval, we are doing so with our specific sample of the population.\nWe are using the mean of the sample as well as the standard deviation.\n\nThe _certainty_ in the confidence interval is not directly but indirectly linked back to the true population.\nWhen we construct a `.95` CI, we are constructing a range of values from a sample, and in doing so are making the assertion that were we to construct CIs for other samples within this population, that approximately `95%` of those confidence intervals would contain the true population parameter.\nThe `.95` _certainty_ is **not** the certainty that the true population parameter is within our given confidence interval. ^[This is so common that we have to have a section in Wikipedia about this: [Confidence intervals: Common misconceptions](https://en.wikipedia.org/wiki/Confidence_interval#Common_misunderstandings).  This phrase is likely how I've been taught and is present within the textbook from my own graduate classes.]\n\n\n### Sampling demonstration\n\nIf we want to check this assumption, we can get `100` new samples and compute the confidence intervals for each of those.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_mean_ci <- function(xbar, s) {\n  # n, z defined outside\n  se <- s / sqrt(n)\n  se_z <- se * z\n  c(lower = xbar - se_z, upper = xbar + se_z)\n}\n\nsem <- do_mean_ci(xbar, s)\n\nr_mean_ci <- replicate(100, {\n  r_x <- do_sample()\n  r_xbar <- mean(r_x)\n  r_sd <- sd(r_x)\n  do_mean_ci(r_xbar, r_sd)\n})\n\nstr(r_mean_ci)\n#>  num [1:2, 1:100] 4.77 5.55 4.76 5.52 4.63 ...\n#>  - attr(*, \"dimnames\")=List of 2\n#>   ..$ : chr [1:2] \"lower\" \"upper\"\n#>   ..$ : NULL\n```\n:::\n\n\nJust for the plotting, we're going to sort of the `r_mean_ci` matrix by the mean value of `upper` and `lower`.\nThis doesn't effect our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reorder by mean of ranges -- simply for visuals\nr_mean_ci <- r_mean_ci[, order(apply(r_mean_ci, 2L, mean))]\n```\n:::\n\n\nNow we can check against this array of intervals, how many contain our population mean, \\mu.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nare_between <- r_mean_ci[\"lower\", ] < mu & r_mean_ci[\"upper\", ] > mu\nmean(are_between)\n#> [1] 0.96\n```\n:::\n\n\n### Plotting confidence intervals (objective 3)\n\nWe're seeing that `sum(are_between)` of our 100 replications do contain the true population mean, \\mu.\nThese are estimations, so we're always going to get exactly 95 of 100.\n\nWe can also plot these confidence intervals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot the points\nplot(\n  x = c(r_mean_ci[\"lower\", ], r_mean_ci[\"upper\", ]),\n  y = c(1:100, 1:100),\n  col = ifelse(c(are_between, are_between), \"darkgreen\", \"purple\"),\n  main = \"Confidence intervals ordered by mean value\",\n  xlab = \"CI\",\n  ylab = \"Order of mean values\"\n)\n\n# connect points with lines\nsegments(\n  r_mean_ci[\"lower\", ], \n  1:100, \n  r_mean_ci[\"upper\", ], \n  1:100,\n  col = ifelse(are_between, \"darkgreen\", \"purple\") ,\n)\n\n# add vertical line for mu\nabline(v = mu, col = \"blue\", lwd = 2, lty = 2)\n\n# provide legend\nlegend(\n  \"bottomright\",\n  c(\"Within CI\", \"Outside CI\", expression(mu)),\n  col = c(\"darkgreen\", \"purple\", \"blue\"),\n  lty = c(1, 1, 2),\n  lwd = c(1, 1, 2),\n  pch = c(1, 1, NA)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plotting mean-1.png){width=768}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}